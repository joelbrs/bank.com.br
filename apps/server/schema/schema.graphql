"""Root queries"""
type Query {
  """The ID of an object"""
  id: ID!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  version: String
  user(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): User
  account(
    accountNumber: String

    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): Account
  transactions(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): TransactionConnectionConnection
  transaction(_id: String!): Transaction
  metrics: [Metrics]
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User object that represents Bank users"""
type User {
  """Represents user's id"""
  _id: String!

  """Represents user's full name"""
  fullName: String!

  """Represents user's taxId (it can be CPF or CNPJ)"""
  taxId: String!

  """Represents user's password"""
  password: String!

  """Represents user's email"""
  email: String!
  createdAt: String
  updatedAt: String
}

"""Account object that represents user's account"""
type Account {
  """Represents account's id"""
  _id: String!

  """Represents account' number"""
  accountNumber: String!

  """Represents owner's taxId of account"""
  userTaxId: String!

  """Represents account's balance"""
  balance: Float!

  """Represents account's owner object"""
  owner: User!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type TransactionConnectionConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionConnectionEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type TransactionConnectionEdge {
  """The item at the end of the edge."""
  node: Transaction

  """A cursor for use in pagination."""
  cursor: String!
}

"""Transaction object that represents accounts transactions"""
type Transaction {
  """Represents transaction's id"""
  _id: String!

  """Represents transaction's value"""
  value: String!

  """Represents transaction's sender"""
  sender: Account!

  """Represents transaction's sender"""
  receiver: Account!
  createdAt: String
  updatedAt: String
}

"""Metrics object that represents transactions metrics of an account"""
type Metrics {
  """Represents metric's month"""
  _id: Int!

  """Represents metric's sum per month"""
  total: Int!

  """Represents metric's sent per month"""
  sent: Int!

  """Represents metric's received per month"""
  received: Int!
}

"""Root mutations"""
type Mutation {
  RegisterUser(input: RegisterUserInput!): RegisterUserPayload
  ConfirmUser(input: ConfirmUserInput!): ConfirmUserPayload
  LoginPasswordAccess(input: LoginPasswordAccessInput!): LoginPasswordAccessPayload
  LoginEmailAccess(input: LoginEmailAccessInput!): LoginEmailAccessPayload
  ValidateAuthenticationLink(input: ValidateAuthenticationLinkInput!): ValidateAuthenticationLinkPayload
  LogoutUser(input: LogoutInput!): LogoutPayload
  CreateTransaction(input: CreateTransactionInput!): CreateTransactionPayload
}

type RegisterUserPayload {
  user: User
  message: String
  clientMutationId: String
}

input RegisterUserInput {
  fullName: String!
  email: String!
  password: String!
  passwordConfirmation: String!
  taxId: String!
  clientMutationId: String
}

type ConfirmUserPayload {
  userId: String!
  clientMutationId: String
}

input ConfirmUserInput {
  code: String!
  redirect: String!
  clientMutationId: String
}

type LoginPasswordAccessPayload {
  userId: String!
  clientMutationId: String
}

input LoginPasswordAccessInput {
  taxId: String!
  password: String!
  clientMutationId: String
}

type LoginEmailAccessPayload {
  message: String!
  clientMutationId: String
}

input LoginEmailAccessInput {
  email: String!
  clientMutationId: String
}

type ValidateAuthenticationLinkPayload {
  userId: String!
  clientMutationId: String
}

input ValidateAuthenticationLinkInput {
  code: String!
  redirect: String!
  clientMutationId: String
}

type LogoutPayload {
  message: String
  clientMutationId: String
}

input LogoutInput {
  clientMutationId: String
}

type CreateTransactionPayload {
  transactionId: String!
  clientMutationId: String
}

input CreateTransactionInput {
  receiverAccountNumber: String!
  value: String!
  clientMutationId: String
}
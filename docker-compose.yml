services:
  nginx:
    build: ./nginx 
    container_name: nginx
    ports:
      - '80:80'
    depends_on:
      - keycloak
      - api-ms-transaction
      - api-ms-authentication
    networks:
      - shared_network
  
  api-ms-authentication:
    container_name: api-ms-authentication
    hostname: api-ms-authentication
    build: 
      context: ms-authentication
      dockerfile: Dockerfile
    env_file:
      - ms-authentication/environments/.env
    depends_on:
      - keycloak
    networks:
      - shared_network
    expose:
      - "8082"
    
  api-ms-transaction:
    container_name: api-ms-transaction
    hostname: api-ms-transaction
    build: 
      context: ms-transaction
      dockerfile: Dockerfile
    env_file:
      - ms-transaction/environments/.env
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - shared_network
    expose:
      - "8081"

  rabbitmq:
    container_name: rabbitmq
    image: 'rabbitmq:3.13-management'
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_DEFAULT_USER: admin
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - shared_network

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0.1
    command:
      - start-dev
      - --import-realm
    ports:
      - 8080:8080
    volumes:
      - ./.keycloak/:/opt/keycloak/data/import/
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_URL: http://keycloak:8080
      KC_HOSTNAME_ADMIN_URL: http://keycloak:8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - shared_network
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/auth/health/live']
      interval: 5s
      timeout: 5s
      retries: 20

networks:
  shared_network:
    driver: bridge
    name: shared_network